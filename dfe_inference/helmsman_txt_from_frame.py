#!/usr/bin/env python3
#this script will take a mutation frame generated by "make_mutation_frame.py", along with an argument for minimum and maximum predicted frequency, 
#and produce a "TXT" format file for Helmsman somatic signature analysis from the selected rows.

import numpy as np
import pandas as pd
import argparse

def argparser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--frame', help = 'Path to a mutation pandas tsv to subset.')
    parser.add_argument('-m', '--max_freq', type = float, help = 'Maximum predicted frequency to include in the text file. Default 0.25', default = 0.25)
    parser.add_argument('-n', '--min_freq', type = float, help = 'Minimum predicted frequency to include in the text file. Default 0', default = 0)
    parser.add_argument('-c', '--coding', help = 'Set to True to include mutations annotated as coding mutations. Default False', default = False)
    args = parser.parse_args()
    return args

def make_txt(row):
    '''
    Takes a row from a pandas dataframe iterator and returns a text line for this mutation.
    '''
    rid = '_'.join([row.SSN, str(row.PredFreq)])
    data = [row.Chro, str(row.Loc), row.Ref, row.Alt, rid] 
    return '\t'.join(data)

def get_text_lines(frame):
    for i,d in frame.iterrows():
        yield make_txt(d)

def main():
    args = argparser()
    mutdf = pd.read_csv(args.frame, sep = '\t')
    mutdf = mutdf[(mutdf.PredFreq > args.min_freq) & (mutdf.PredFreq < args.max_freq)]
    if not args.coding:
        mutdf = mutdf[mutdf.Type == 'noncoding_variant']
    for line in get_text_lines(mutdf):
        print(line)    
    
if __name__ == '__main__':
    main()